#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C)
#     2019-2020 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
"""postfix filter script for gpgmail

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
"""

import sys

from argparse import ArgumentParser, FileType, RawTextHelpFormatter
from subprocess import PIPE, Popen


__author__ = 'J. Nathanael Philipp'
__email__ = 'nathanael@philipp.land'
__license__ = 'GPLv3'
__version__ = '0.5.0'
__github__ = 'https://github.com/jnphilipp/gpgmail'
VERSION = f'%(prog)s v{__version__}\n\nReport bugs to {__github__}/issues.' + \
    f'\n\nWritten by {__author__} <{__email__}>'


if __name__ == '__main__':
    parser = ArgumentParser(prog='gpgmail',
                            formatter_class=RawTextHelpFormatter)
    parser.add_argument('-v', '--version', action='version', version=VERSION)
    parser.add_argument('--gnupghome', default=None,
                        help='Path to GnuPG home dir.')
    parser.add_argument('-k', '--key', help='GnuPG key')
    parser.add_argument('-p', '--passphrase', default=None,
                        help='Passphrase for given GnuPG key.')
    parser.add_argument('--sendmail', nargs='*', default=[],
                        help='Arguments passed to sendmail.')

    parser.add_argument('--sender', nargs='+', help='Sender')
    parser.add_argument('--recipients', nargs='+', help='Recipients')
    parser.add_argument('MAIL', type=FileType('r'), nargs='?',
                        default=sys.stdin, help='E-mail, default from stdin.')

    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('-H', '--encrypt-headers', action='store_true',
                       help='Encrypt some headers when encrypting a email ' +
                       '(https://github.com/autocrypt/memoryhole).')
    group.add_argument('-S', '--encrypt-subject', action='store_true',
                       help='Encrypt the subject when encrypting a email, ' +
                       'see --encrypt-headers.')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-d', '--decrypt', action='store_true',
                       help='Decrypt E-mail.')
    group.add_argument('-e', '--encrypt', action='store_true',
                       help='Encrypt E-mail.')
    group.add_argument('-s', '--sign', action='store_true',
                       help='Sign E-mail.')
    group.add_argument('-E', '--sign-encrypt', action='store_true',
                       help='Sign and encrypt E-mail.')
    args = parser.parse_args()

    gpgmail = ['gpgmail']
    if args.decrypt:
        gpgmail.append('--decrypt')
    elif args.encrypt:
        gpgmail.append('--encrypt')
    elif args.sign:
        gpgmail.append('--sign')
    elif args.sign_encrypt:
        gpgmail.append('--sign-encrypt')
    if args.gnupghome:
        gpgmail.append(f'--gnupghome={args.gnupghome}')
    if args.key:
        gpgmail.append(f'--key={args.key}')
    if args.passphrase:
        gpgmail.append(f'--passphrase={args.passphrase}')
    if args.encrypt_headers:
        gpgmail.append('--encrypt-headers')
    elif args.encrypt_subject:
        gpgmail.append('--encrypt-subject')
    gpgmail += args.recipients

    p1 = Popen(gpgmail, stdout=PIPE, stdin=PIPE)
    p2 = Popen(['sendmail'] + args.sendmail + [f'-f {"".join(args.sender)}'] +
               args.recipients, stdin=p1.stdout, stdout=PIPE)
    p1.communicate(args.MAIL.read().encode())
    p1.stdout.close()
    output = p2.communicate()
    sys.exit(p2.returncode)
